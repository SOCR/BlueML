start({"html":"<!DOCTYPE html>\r\n<html ng-app=\"app\">\r\n  <head>\r\n    <meta charset=utf-8>\r\n    <title>How can AngularJS bind to list of checkbox values?</title>\r\n    <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js\"><\/script>\r\n    <link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\">\r\n  </head>\r\n\r\n  <body>\r\n    <div class=\"container\">\r\n      <div class=\"page-header\">\r\n        <h1><a href=\"http://stackoverflow.com/q/14514461/697154\">How can AngularJS bind to list of checkbox values?</a></h1>\r\n      </div>\r\n\r\n      <div ng-controller=\"SimpleArrayCtrl\">\r\n        <h3>With a simple array as input data</h3>\r\n\r\n        <dl>\r\n          <dt>Pros</dt>\r\n          <dd>simple data structure and toggling by name is easy to handle</dd>\r\n\r\n          <dt>Cons</dt>\r\n          <dd>add/remove is cumbersome as two lists (the input and selection) have to be managed</dd>\r\n        </dl>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <h4>selectables</h4>\r\n            <div class=\"form-group\">\r\n              <label ng-repeat=\"fruitName in fruits\" class=\"checkbox-inline\">\r\n                <input type=\"checkbox\" name=\"selectedFruits[]\" value=\"{{fruitName}}\" ng-checked=\"selection.indexOf(fruitName) > -1\" ng-click=\"toggleSelection(fruitName)\"> {{fruitName}}\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col-md-6\">\r\n            <p><strong>Toggling</strong> by name is easy in this case, because the needed helper method can be reused.</p>\r\n            <button class=\"btn btn-default\" ng-click=\"toggleSelection('naartjie')\">Toggle <em>naartjie</em></button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <h4>selection</h4>\r\n            <pre>{{selection|json}}</pre>\r\n          </div>\r\n\r\n          <div class=\"col-md-6\">\r\n            <h4>input</h4>\r\n            <pre>{{fruits|json}}</pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <hr>\r\n\r\n      <div ng-controller=\"ObjectArrayCtrl\">\r\n        <h3>With an object array as input data</h3>\r\n\r\n        <dl>\r\n          <dt>Pros</dt>\r\n          <dd>add/remove is very easy</dd>\r\n\r\n          <dt>Cons</dt>\r\n          <dd>somewhat more complex data structure and toggling by name is cumbersome or requires a helper method</dd>\r\n        </dl>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <h4>selectables</h4>\r\n            <div class=\"form-group\">\r\n              <label ng-repeat=\"fruit in fruits\" class=\"checkbox-inline\">\r\n                <\!--\r\n                  - use `value=\"{{fruit.name}}\"` to give the input a real value, in case the form gets submitted\r\n                    traditionally\r\n\r\n                  - use `ng-checked=\"fruit.selected\"` to have the checkbox checked based on some angular expression\r\n                    (no two-way-data-binding)\r\n\r\n                  - use `ng-model=\"fruit.selected\"` to utilize two-way-data-binding. Note that `.selected`\r\n                    is arbitrary. The property name could be anything and will be created on the object if not present.\r\n                -->\r\n                <input type=\"checkbox\" name=\"selectedFruits[]\" value=\"{{fruitName}}\" ng-model=\"fruit.selected\">\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col-md-6\">\r\n            <p><strong>Toggling</strong> by name is not so easy in this case, because the the code is either rather ugly, or a helper method is needed.</p>\r\n            <button class=\"btn btn-default\" ng-click=\"(fruits|filter:{name:'naartjie'})[0].selected = !(fruits|filter:{name:'naartjie'})[0].selected\">Toggle <em>naartjie</em></button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <h4>selection as simple array using $watch</h4>\r\n            <pre>{{selection|json}}</pre>\r\n\r\n            <h4>selection as simple array using a custom filter</h4>\r\n            <pre>{{fruits|fruitSelection:'name'|json}}</pre>\r\n\r\n            <h4>selection using the default filter</h4>\r\n            <pre>{{fruits|filter:{selected:true}|json}}</pre>\r\n\r\n            <h4>selection using a helper function</h4>\r\n            <pre>{{selectedFruits()|json}}</pre>\r\n          </div>\r\n\r\n          <div class=\"col-md-6\">\r\n            <h4>input</h4>\r\n            <pre>{{fruits|json}}</pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>","javascript":"(function (app) {\r\n  'use strict';\r\n  \r\n  app.controller('SimpleArrayCtrl', ['$scope', function SimpleArrayCtrl($scope) {\r\n    // fruits\r\n    $scope.fruits = ['apple', 'orange', 'pear', 'naartjie'];\r\n    \r\n    // selected fruits\r\n    $scope.selection = ['apple', 'pear'];\r\n    \r\n    // toggle selection for a given fruit by name\r\n    $scope.toggleSelection = function toggleSelection(fruitName) {\r\n      var idx = $scope.selection.indexOf(fruitName);\r\n      \r\n      // is currently selected\r\n      if (idx > -1) {\r\n        $scope.selection.splice(idx, 1);\r\n      }\r\n      \r\n      // is newly selected\r\n      else {\r\n        $scope.selection.push(fruitName);\r\n      }\r\n    };\r\n  }]);\r\n  \r\n  app.controller('ObjectArrayCtrl', ['$scope', 'filterFilter', function ObjectArrayCtrl($scope, filterFilter) {\r\n    // fruits\r\n    $scope.fruits = [\r\n      { name: 'apple',    selected: true },\r\n      { name: 'orange',   selected: false },\r\n      { name: 'pear',     selected: true },\r\n      { name: 'naartjie', selected: false }\r\n    ];\r\n    \r\n    // selected fruits\r\n    $scope.selection = [];\r\n    \r\n    // helper method\r\n    $scope.selectedFruits = function selectedFruits() {\r\n      return filterFilter($scope.fruits, { selected: true });\r\n    };\r\n    \r\n    // watch fruits for changes\r\n    $scope.$watch('fruits|filter:{selected:true}', function (nv) {\r\n      $scope.selection = nv.map(function (fruit) {\r\n        return fruit.name;\r\n      });\r\n    }, true);\r\n  }]);\r\n  \r\n  /**\r\n   * custom filter\r\n   */\r\n  app.filter('fruitSelection', ['filterFilter', function (filterFilter) {\r\n    return function fruitSelection(input, prop) {\r\n      return filterFilter(input, { selected: true }).map(function (fruit) {\r\n        return fruit[prop];\r\n      });\r\n    };\r\n  }]);\r\n})(angular.module('app', []));","css":"","url":"http://jsbin.com/kamuyufope"}, {"state":{"title":"How can AngularJS bind to list of checkbox values?","description":"","token":"YhZF/10+q+PkuclpdAHJYdH3","stream":false,"streaming":true,"code":"kamuyufope","revision":1,"processors":{"html":"html","css":"css","javascript":"javascript"},"checksum":null,"metadata":{"name":"anonymous","visibility":"public","last_updated":"2017-03-16T22:07:16.000Z"},"latest":true},"name":"JS Bin","settings":{"panels":["html","javascript","live"]},"user":{"settings":{}},"saveDisabled":true}, this, document);
